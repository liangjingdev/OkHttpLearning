package com.liangjing.filedownload.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_ENTITY".
*/
public class DownloadEntityDao extends AbstractDao<DownloadEntity, Long> {

    public static final String TABLENAME = "DOWNLOAD_ENTITY";

    /**
     * Properties of entity DownloadEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartPosition = new Property(1, Long.class, "startPosition", false, "START_POSITION");
        public final static Property EndPosition = new Property(2, Long.class, "endPosition", false, "END_POSITION");
        public final static Property ProgressPosition = new Property(3, Long.class, "progressPosition", false, "PROGRESS_POSITION");
        public final static Property DownloadUrl = new Property(4, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property ThreadId = new Property(5, Integer.class, "threadId", false, "THREAD_ID");
    }


    public DownloadEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"START_POSITION\" INTEGER," + // 1: startPosition
                "\"END_POSITION\" INTEGER," + // 2: endPosition
                "\"PROGRESS_POSITION\" INTEGER," + // 3: progressPosition
                "\"DOWNLOAD_URL\" TEXT," + // 4: downloadUrl
                "\"THREAD_ID\" INTEGER);"); // 5: threadId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long startPosition = entity.getStartPosition();
        if (startPosition != null) {
            stmt.bindLong(2, startPosition);
        }
 
        Long endPosition = entity.getEndPosition();
        if (endPosition != null) {
            stmt.bindLong(3, endPosition);
        }
 
        Long progressPosition = entity.getProgressPosition();
        if (progressPosition != null) {
            stmt.bindLong(4, progressPosition);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(5, downloadUrl);
        }
 
        Integer threadId = entity.getThreadId();
        if (threadId != null) {
            stmt.bindLong(6, threadId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long startPosition = entity.getStartPosition();
        if (startPosition != null) {
            stmt.bindLong(2, startPosition);
        }
 
        Long endPosition = entity.getEndPosition();
        if (endPosition != null) {
            stmt.bindLong(3, endPosition);
        }
 
        Long progressPosition = entity.getProgressPosition();
        if (progressPosition != null) {
            stmt.bindLong(4, progressPosition);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(5, downloadUrl);
        }
 
        Integer threadId = entity.getThreadId();
        if (threadId != null) {
            stmt.bindLong(6, threadId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadEntity readEntity(Cursor cursor, int offset) {
        DownloadEntity entity = new DownloadEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // startPosition
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // endPosition
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // progressPosition
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // downloadUrl
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // threadId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartPosition(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEndPosition(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setProgressPosition(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDownloadUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThreadId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
